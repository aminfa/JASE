# mapping of classes to ontological types (key-value store with class names as keys and ontological types as values)
# separate class names from the ontological type by tabulator(s)

# As long as you encode objects by the appropriate OntologySerializer from Java, it does not matter which ontological type names you use.
# However, the idea is that each ontological type is associated with a JSON grammar which says how instances of that object may be serialized.
# For now, the used serializers implicitly define that grammar. However, it would be a good thing to have the JSON grammars independently.

# The absense of JSON grammars for the types makes it currently a little bit cumbersome to use the server from non-Java environments or without the
# encoders. That is because if you address the server from a non-Java environment, you need to figure out how to serialize your objects. 

jaicore.ml.core.SimpleInstanceImpl				Instance
jaicore.ml.core.SimpleInstancesImpl				Instances
Catalano.Imaging.FastBitmap						Instance
jaicore.ml.core.SimpleLabeledInstancesImpl		Instances
weka.core.Instances								Instances
weka.core.Instance								Instance
weka.core.DenseInstance							Instance
